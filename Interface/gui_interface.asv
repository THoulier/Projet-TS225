function varargout = gui_interface(varargin)
%GUI_INTERFACE MATLAB code file for gui_interface.fig
%      GUI_INTERFACE, by itself, creates a new GUI_INTERFACE or raises the existing
%      singleton*.
%
%      H = GUI_INTERFACE returns the handle to a new GUI_INTERFACE or the handle to
%      the existing singleton*.
%
%      GUI_INTERFACE('Property','Value',...) creates a new GUI_INTERFACE using the
%      given property value pairs. Unrecognized properties are passed via
%      varargin to gui_interface_OpeningFcn.  This calling syntax produces a
%      warning when there is an existing singleton*.
%
%      GUI_INTERFACE('CALLBACK') and GUI_INTERFACE('CALLBACK',hObject,...) call the
%      local function named CALLBACK in GUI_INTERFACE.M with the given input
%      arguments.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help gui_interface

% Last Modified by GUIDE v2.5 17-Jan-2021 22:19:59

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @gui_interface_OpeningFcn, ...
                   'gui_OutputFcn',  @gui_interface_OutputFcn, ...
                   'gui_LayoutFcn',  [], ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
   gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before gui_interface is made visible.
function gui_interface_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   unrecognized PropertyName/PropertyValue pairs from the
%            command line (see VARARGIN)

% Choose default command line output for gui_interface
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes gui_interface wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = gui_interface_OutputFcn(hObject, eventdata, handles)
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes when selected object is changed in uibuttongroup1.
function uibuttongroup1_SelectionChangedFcn(hObject, eventdata, handles)
% hObject    handle to the selected object in uibuttongroup1 
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
switch(get(eventdata.NewValue,'Tag'))
    case 'radiobutton1'
        a = get(handles.radiobutton1,'string');
        set(handles.edit1,'string',a);
    case 'radiobutton2'
        a = get(handles.radiobutton2,'string');
        set(handles.edit1,'string',a);
end



function edit1_Callback(hObject, eventdata, handles)
% hObject    handle to edit1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit1 as text
%        str2double(get(hObject,'String')) returns contents of edit1 as a double


% --- Executes during object creation, after setting all properties.
function edit1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in pushbutton1.
function pushbutton1_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

%% Importation

addpath('AreaOfInterest','SignatureCreation','RandomRays');

%% Parametres

N = 256;
sigma_g = 1;
sigma_t = 2*sigma_g;

%% Image d'un code-barres
img = double(imread('codebarre3.jpg'));
axes(handles.axes1);
imshow(uint8(img));

img_gray = get_img_gray(img);

%% Choix de la zone d'interet
radio1 = get(handles.radiobutton1,'Value');
radio2 = get(handles.radiobutton2,'Value');

if radio2
    %% Choix arbitraire de la zone d'interet
    area = choose_area_of_interest(); % area = [x_min x_max; y_min y_max]

elseif radio1
    %% Choix automatique de la zone d'interet

    % Utilisation de la mesure de coherence pour trouver des regions d'interet
    D_binaire = find_area_of_interest(sigma_g, sigma_t, img_gray);

    % Inversion de la matrice (0 <-> 1)
    D_binaire_inv_01 = inv_01(D_binaire);

    % Calcul du numero de la zone d'interet (d'où l'utilité d'inverser 0 <-> 1)
    [D_binaire_inv_01_bw, num] = bwlabel(D_binaire_inv_01,8);

    % Obtention de la zone du code-barres
    [area_label, area_label_size, is_area_centered, area_index] = get_area_of_interest(D_binaire_inv_01_bw, num);      
    [x_start,y_start,width,height] = show_area_of_interest(area_index);
    area = [x_start x_start+width; y_start y_start+height]; % area = [x_min x_max; y_min y_max]

    else
    area = choose_area_of_interest(); % area = [x_min x_max; y_min y_max]
end

% Area
axes(handles.axes1);
imshow(uint8(img)); 

cle = -1;
cle_ref = 0;
chiffre1 = -1;
cnt = 0;

while (cle ~= cle_ref || chiffre1 == -1)
    % incrémentation du compteur (d'iterations)
    cnt = cnt+1;

    [X,Y] = random_throw(area);
    line(X,Y);

    % Discretisation du rayon en 2*Dist_euclidienne points
    Dist_euclidienne = sqrt(abs(X(1)-X(2))^2+abs(Y(1)-Y(2))^2);
    subdi1 = round(2*Dist_euclidienne);

    p1 = [X(1) Y(1)]; % 1er point
    p2 = [X(2) Y(2)]; % 2nd point
    [p1,p2] = swap(p1,p2); % si x1 > x2

    % subdivision du 1er segement
    seg_sub1 = subdivision_segment(subdi1, p1, p2);

    %% Creation de la 1ere signature

    % creation de la signature 1
    signature1 = creation_signature(subdi1, seg_sub1, img_gray);

    % axe des abscisse discretise
    S1 = size(seg_sub1);
    ab1 = round(seg_sub1(2,1)):(round(seg_sub1(S1(1),1))-round(seg_sub1(2,1)))/(subdi1):round(seg_sub1(S1(1),1))-(round(seg_sub1(S1(1),1))-round(seg_sub1(2,1)))/(subdi1);

    % critere d'Otsu
    histo = hist(signature1,256);
    crit = Otsu(N, histo);
    [maxi_histo, seuil] = max(crit);

    % binarisation de la signature 1
    signature1_binaire = binarisation(signature1, seuil);

    % obtention des extremites du segment
    [extrem_gauche, extrem_droite] = find_Extremites(subdi1, img_gray, seg_sub1, seuil);

    %% Creation du 2nd segment subdivise en un multiple de 95 (ie 95*u) + binarisation

    u = 5;
    subdi2 = 95*u;
    seg_sub2 = subdivision_segment(subdi2, extrem_gauche, extrem_droite);

    % creation de la signature 2
    signature2 = creation_signature(subdi2, seg_sub2, img_gray);

    % binarisation de la signature 2
    signature2_binaire = binarisation(signature2, seuil);

    % axe des abscisse discretise
    S2 = size(seg_sub2);
    ab2 = round(seg_sub2(2,1)):(round(seg_sub2(S2(1),1))-round(seg_sub2(2,1)))/(subdi2):round(seg_sub2(S2(1),1))-(round(seg_sub2(S2(1),1))-round(seg_sub2(2,1)))/(subdi2);

    %% Identification des chiffres

    %Base de donnees des Elements (A/B/C)
    ElementA_dup = dupTab(BDD_ElementType("A"),u);
    ElementB_dup = dupTab(BDD_ElementType("B"),u);
    ElementC_dup = dupTab(BDD_ElementType("C"),u);

    Elements_dup = [ElementA_dup; ElementB_dup; ElementC_dup];

    %Segmentation Signature 2 en deux segments de 6 chiffres
    wi_nor = 3; % largeur de  la garde normale
    wi_cen = 5; % largeur de la garde centrale
    wi_num = 7; % largeur pour un chiffre
    Segment1 = signature2_binaire(u*wi_nor+1:u*wi_nor + 6*wi_num*u);
    Segment2 = signature2_binaire((6*wi_num+wi_nor+wi_cen)*u+1:(6*wi_num+wi_nor+wi_cen)*u + 6*wi_num*u);

    % Identification des correspondances
    Segment_total = [Segment1 Segment2];
    tab_idx = identification_matching(u, Segment_total, Elements_dup);

    %Traitement du resultat : recuperation des 12 chiffres et de leur classe
    [list_chiffres, list_classes] = index2number(tab_idx);

    %Deduction du premier chiffre
    chiffre1 = get_chiffre1(list_classes(1:6));

    %Deduction de la cle de controle
    cle = get_cle_controle([chiffre1 list_chiffres(1:11)]);

    % Test
    cle_ref = list_chiffres(end);
    code_barres = int2str(chiffre1);
    for i = 1:length(list_chiffres)
        if (i == 1 || i == 7)
            code_barres = [code_barres ' '];
        end
        code_barres = [code_barres int2str(list_chiffres(i))];
    end
%     if (cle == cle_ref)
%         sprintf("\nCode-barres : %s\n1er chiffre : %d\nLa clé de contrôle vaut : %d\nNombre d'itérations : %d\n", code_barres, chiffre1, cle, cnt)
%     end  
end

%% Interfaces
    numero_codebarre = code_barres;
    nb_iterations = int2str(cnt);

    set(handles.iterations,'string',nb_iterations);
    set(handles.barcode,'string',numero_codebarre);
    
    success = "The barcode has been decoded successfully !";
    if (chiffre1 ~= -1)
        set(handles.final_word,'string',success);
    else

function barcode_Callback(hObject, eventdata, handles)
% hObject    handle to barcode (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of barcode as text
%        str2double(get(hObject,'String')) returns contents of barcode as a double


% --- Executes during object creation, after setting all properties.
function barcode_CreateFcn(hObject, eventdata, handles)
% hObject    handle to barcode (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function iterations_Callback(hObject, eventdata, handles)
% hObject    handle to iterations (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of iterations as text
%        str2double(get(hObject,'String')) returns contents of iterations as a double


% --- Executes during object creation, after setting all properties.
function iterations_CreateFcn(hObject, eventdata, handles)
% hObject    handle to iterations (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
